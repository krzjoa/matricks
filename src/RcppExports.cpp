// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// antidiag
RObject antidiag(RObject x, Nullable<NumericVector> nrow, Nullable<NumericVector> ncol);
RcppExport SEXP _matricks_antidiag(SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(antidiag(x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// antidiag_assign
RObject antidiag_assign(NumericMatrix x, NumericVector value);
RcppExport SEXP _matricks_antidiag_assign(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(antidiag_assign(x, value));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matricks_antidiag", (DL_FUNC) &_matricks_antidiag, 3},
    {"_matricks_antidiag_assign", (DL_FUNC) &_matricks_antidiag_assign, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matricks(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
